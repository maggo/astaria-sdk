/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type {
  VaultImplementation,
  VaultImplementationInterface,
} from '../VaultImplementation'

const _abi = [
  {
    inputs: [
      {
        internalType: 'enum IVaultImplementation.InvalidRequestReason',
        name: 'reason',
        type: 'uint8',
      },
    ],
    name: 'InvalidRequest',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    name: 'AllowListEnabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    name: 'AllowListUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'DelegateUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'nonce',
        type: 'uint256',
      },
    ],
    name: 'IncrementNonce',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'nonce',
        type: 'uint256',
      },
    ],
    name: 'NonceUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [],
    name: 'VaultShutdown',
    type: 'event',
  },
  {
    inputs: [],
    name: 'COLLATERAL_TOKEN',
    outputs: [
      {
        internalType: 'contract ICollateralToken',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'EPOCH_LENGTH',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'IMPL_TYPE',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ROUTER',
    outputs: [
      {
        internalType: 'contract IAstariaRouter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'START',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'STRATEGY_TYPEHASH',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'VAULT_FEE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'asset',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'collateralType',
                type: 'uint8',
              },
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'address',
                name: 'vault',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'strategyRoot',
                type: 'bytes32',
              },
              {
                internalType: 'uint256',
                name: 'collateralId',
                type: 'uint256',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'maxAmount',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'rate',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'duration',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'maxPotentialDebt',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'liquidationInitialAsk',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ILienToken.Details',
                name: 'details',
                type: 'tuple',
              },
            ],
            internalType: 'struct ILienToken.Lien',
            name: 'lien',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
              {
                internalType: 'uint40',
                name: 'last',
                type: 'uint40',
              },
              {
                internalType: 'uint40',
                name: 'end',
                type: 'uint40',
              },
              {
                internalType: 'uint256',
                name: 'lienId',
                type: 'uint256',
              },
            ],
            internalType: 'struct ILienToken.Point',
            name: 'point',
            type: 'tuple',
          },
        ],
        internalType: 'struct ILienToken.Stack[]',
        name: 'stack',
        type: 'tuple[]',
      },
      {
        internalType: 'uint8',
        name: 'position',
        type: 'uint8',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenContract',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'tokenId',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'version',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'deadline',
                    type: 'uint256',
                  },
                  {
                    internalType: 'address',
                    name: 'vault',
                    type: 'address',
                  },
                ],
                internalType: 'struct IAstariaRouter.StrategyDetailsParam',
                name: 'strategy',
                type: 'tuple',
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'collateralType',
                        type: 'uint8',
                      },
                      {
                        internalType: 'address',
                        name: 'token',
                        type: 'address',
                      },
                      {
                        internalType: 'address',
                        name: 'vault',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes32',
                        name: 'strategyRoot',
                        type: 'bytes32',
                      },
                      {
                        internalType: 'uint256',
                        name: 'collateralId',
                        type: 'uint256',
                      },
                      {
                        components: [
                          {
                            internalType: 'uint256',
                            name: 'maxAmount',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'rate',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'duration',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'maxPotentialDebt',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'liquidationInitialAsk',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct ILienToken.Details',
                        name: 'details',
                        type: 'tuple',
                      },
                    ],
                    internalType: 'struct ILienToken.Lien',
                    name: 'lien',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint40',
                        name: 'last',
                        type: 'uint40',
                      },
                      {
                        internalType: 'uint40',
                        name: 'end',
                        type: 'uint40',
                      },
                      {
                        internalType: 'uint256',
                        name: 'lienId',
                        type: 'uint256',
                      },
                    ],
                    internalType: 'struct ILienToken.Point',
                    name: 'point',
                    type: 'tuple',
                  },
                ],
                internalType: 'struct ILienToken.Stack[]',
                name: 'stack',
                type: 'tuple[]',
              },
              {
                internalType: 'bytes',
                name: 'nlrDetails',
                type: 'bytes',
              },
              {
                components: [
                  {
                    internalType: 'bytes32',
                    name: 'root',
                    type: 'bytes32',
                  },
                  {
                    internalType: 'bytes32[]',
                    name: 'proof',
                    type: 'bytes32[]',
                  },
                ],
                internalType: 'struct IAstariaRouter.MerkleData',
                name: 'merkle',
                type: 'tuple',
              },
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
              {
                internalType: 'uint8',
                name: 'v',
                type: 'uint8',
              },
              {
                internalType: 'bytes32',
                name: 'r',
                type: 'bytes32',
              },
              {
                internalType: 'bytes32',
                name: 's',
                type: 'bytes32',
              },
            ],
            internalType: 'struct IAstariaRouter.NewLienRequest',
            name: 'lienRequest',
            type: 'tuple',
          },
        ],
        internalType: 'struct IAstariaRouter.Commitment',
        name: 'incomingTerms',
        type: 'tuple',
      },
    ],
    name: 'buyoutLien',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'collateralType',
                type: 'uint8',
              },
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'address',
                name: 'vault',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'strategyRoot',
                type: 'bytes32',
              },
              {
                internalType: 'uint256',
                name: 'collateralId',
                type: 'uint256',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'maxAmount',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'rate',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'duration',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'maxPotentialDebt',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'liquidationInitialAsk',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ILienToken.Details',
                name: 'details',
                type: 'tuple',
              },
            ],
            internalType: 'struct ILienToken.Lien',
            name: 'lien',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
              {
                internalType: 'uint40',
                name: 'last',
                type: 'uint40',
              },
              {
                internalType: 'uint40',
                name: 'end',
                type: 'uint40',
              },
              {
                internalType: 'uint256',
                name: 'lienId',
                type: 'uint256',
              },
            ],
            internalType: 'struct ILienToken.Point',
            name: 'point',
            type: 'tuple',
          },
        ],
        internalType: 'struct ILienToken.Stack[]',
        name: 'stacks',
        type: 'tuple[]',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'collateralType',
                type: 'uint8',
              },
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'address',
                name: 'vault',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'strategyRoot',
                type: 'bytes32',
              },
              {
                internalType: 'uint256',
                name: 'collateralId',
                type: 'uint256',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'maxAmount',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'rate',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'duration',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'maxPotentialDebt',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'liquidationInitialAsk',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ILienToken.Details',
                name: 'details',
                type: 'tuple',
              },
            ],
            internalType: 'struct ILienToken.Lien',
            name: 'lien',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
              {
                internalType: 'uint40',
                name: 'last',
                type: 'uint40',
              },
              {
                internalType: 'uint40',
                name: 'end',
                type: 'uint40',
              },
              {
                internalType: 'uint256',
                name: 'lienId',
                type: 'uint256',
              },
            ],
            internalType: 'struct ILienToken.Point',
            name: 'point',
            type: 'tuple',
          },
        ],
        internalType: 'struct ILienToken.Stack',
        name: 'newStack',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenContract',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'tokenId',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'version',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'deadline',
                    type: 'uint256',
                  },
                  {
                    internalType: 'address',
                    name: 'vault',
                    type: 'address',
                  },
                ],
                internalType: 'struct IAstariaRouter.StrategyDetailsParam',
                name: 'strategy',
                type: 'tuple',
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'collateralType',
                        type: 'uint8',
                      },
                      {
                        internalType: 'address',
                        name: 'token',
                        type: 'address',
                      },
                      {
                        internalType: 'address',
                        name: 'vault',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes32',
                        name: 'strategyRoot',
                        type: 'bytes32',
                      },
                      {
                        internalType: 'uint256',
                        name: 'collateralId',
                        type: 'uint256',
                      },
                      {
                        components: [
                          {
                            internalType: 'uint256',
                            name: 'maxAmount',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'rate',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'duration',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'maxPotentialDebt',
                            type: 'uint256',
                          },
                          {
                            internalType: 'uint256',
                            name: 'liquidationInitialAsk',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct ILienToken.Details',
                        name: 'details',
                        type: 'tuple',
                      },
                    ],
                    internalType: 'struct ILienToken.Lien',
                    name: 'lien',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint40',
                        name: 'last',
                        type: 'uint40',
                      },
                      {
                        internalType: 'uint40',
                        name: 'end',
                        type: 'uint40',
                      },
                      {
                        internalType: 'uint256',
                        name: 'lienId',
                        type: 'uint256',
                      },
                    ],
                    internalType: 'struct ILienToken.Point',
                    name: 'point',
                    type: 'tuple',
                  },
                ],
                internalType: 'struct ILienToken.Stack[]',
                name: 'stack',
                type: 'tuple[]',
              },
              {
                internalType: 'bytes',
                name: 'nlrDetails',
                type: 'bytes',
              },
              {
                components: [
                  {
                    internalType: 'bytes32',
                    name: 'root',
                    type: 'bytes32',
                  },
                  {
                    internalType: 'bytes32[]',
                    name: 'proof',
                    type: 'bytes32[]',
                  },
                ],
                internalType: 'struct IAstariaRouter.MerkleData',
                name: 'merkle',
                type: 'tuple',
              },
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
              {
                internalType: 'uint8',
                name: 'v',
                type: 'uint8',
              },
              {
                internalType: 'bytes32',
                name: 'r',
                type: 'bytes32',
              },
              {
                internalType: 'bytes32',
                name: 's',
                type: 'bytes32',
              },
            ],
            internalType: 'struct IAstariaRouter.NewLienRequest',
            name: 'lienRequest',
            type: 'tuple',
          },
        ],
        internalType: 'struct IAstariaRouter.Commitment',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'commitToLien',
    outputs: [
      {
        internalType: 'uint256',
        name: 'lienId',
        type: 'uint256',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'collateralType',
                type: 'uint8',
              },
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'address',
                name: 'vault',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'strategyRoot',
                type: 'bytes32',
              },
              {
                internalType: 'uint256',
                name: 'collateralId',
                type: 'uint256',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'maxAmount',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'rate',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'duration',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'maxPotentialDebt',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'liquidationInitialAsk',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ILienToken.Details',
                name: 'details',
                type: 'tuple',
              },
            ],
            internalType: 'struct ILienToken.Lien',
            name: 'lien',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
              {
                internalType: 'uint40',
                name: 'last',
                type: 'uint40',
              },
              {
                internalType: 'uint40',
                name: 'end',
                type: 'uint40',
              },
              {
                internalType: 'uint256',
                name: 'lienId',
                type: 'uint256',
              },
            ],
            internalType: 'struct ILienToken.Point',
            name: 'point',
            type: 'tuple',
          },
        ],
        internalType: 'struct ILienToken.Stack[]',
        name: 'stack',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'disableAllowList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'domainSeparator',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'enableAllowList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint8',
            name: 'version',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'vault',
            type: 'address',
          },
        ],
        internalType: 'struct IAstariaRouter.StrategyDetailsParam',
        name: 'strategy',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'root',
        type: 'bytes32',
      },
    ],
    name: 'encodeStrategyData',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getShutdown',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getStrategistNonce',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'incrementNonce',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'delegate',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'allowListEnabled',
            type: 'bool',
          },
          {
            internalType: 'address[]',
            name: 'allowList',
            type: 'address[]',
          },
          {
            internalType: 'uint256',
            name: 'depositCap',
            type: 'uint256',
          },
        ],
        internalType: 'struct IVaultImplementation.InitParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'init',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'isDelegateOrOwner',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'depositor',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: 'enabled',
        type: 'bool',
      },
    ],
    name: 'modifyAllowList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'newCap',
        type: 'uint256',
      },
    ],
    name: 'modifyDepositCap',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'onERC721Received',
    outputs: [
      {
        internalType: 'bytes4',
        name: '',
        type: 'bytes4',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'recipient',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'delegate_',
        type: 'address',
      },
    ],
    name: 'setDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'shutdown',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const

export class VaultImplementation__factory {
  static readonly abi = _abi
  static createInterface(): VaultImplementationInterface {
    return new utils.Interface(_abi) as VaultImplementationInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultImplementation {
    return new Contract(address, _abi, signerOrProvider) as VaultImplementation
  }
}
