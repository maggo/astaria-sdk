/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace IPublicVault {
  export type BeforePaymentParamsStruct = {
    lienSlope: PromiseOrValue<BigNumberish>
    amount: PromiseOrValue<BigNumberish>
    interestOwed: PromiseOrValue<BigNumberish>
  }

  export type BeforePaymentParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { lienSlope: BigNumber; amount: BigNumber; interestOwed: BigNumber }

  export type LiquidationPaymentParamsStruct = {
    remaining: PromiseOrValue<BigNumberish>
  }

  export type LiquidationPaymentParamsStructOutput = [BigNumber] & {
    remaining: BigNumber
  }

  export type AfterLiquidationParamsStruct = {
    lienSlope: PromiseOrValue<BigNumberish>
    newAmount: PromiseOrValue<BigNumberish>
    lienEnd: PromiseOrValue<BigNumberish>
  }

  export type AfterLiquidationParamsStructOutput = [
    BigNumber,
    BigNumber,
    number
  ] & { lienSlope: BigNumber; newAmount: BigNumber; lienEnd: number }
}

export declare namespace ILienToken {
  export type DetailsStruct = {
    maxAmount: PromiseOrValue<BigNumberish>
    rate: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
    maxPotentialDebt: PromiseOrValue<BigNumberish>
    liquidationInitialAsk: PromiseOrValue<BigNumberish>
  }

  export type DetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxAmount: BigNumber
    rate: BigNumber
    duration: BigNumber
    maxPotentialDebt: BigNumber
    liquidationInitialAsk: BigNumber
  }

  export type LienStruct = {
    collateralType: PromiseOrValue<BigNumberish>
    token: PromiseOrValue<string>
    vault: PromiseOrValue<string>
    strategyRoot: PromiseOrValue<BytesLike>
    collateralId: PromiseOrValue<BigNumberish>
    details: ILienToken.DetailsStruct
  }

  export type LienStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    ILienToken.DetailsStructOutput
  ] & {
    collateralType: number
    token: string
    vault: string
    strategyRoot: string
    collateralId: BigNumber
    details: ILienToken.DetailsStructOutput
  }

  export type PointStruct = {
    amount: PromiseOrValue<BigNumberish>
    last: PromiseOrValue<BigNumberish>
    end: PromiseOrValue<BigNumberish>
    lienId: PromiseOrValue<BigNumberish>
  }

  export type PointStructOutput = [BigNumber, number, number, BigNumber] & {
    amount: BigNumber
    last: number
    end: number
    lienId: BigNumber
  }

  export type StackStruct = {
    lien: ILienToken.LienStruct
    point: ILienToken.PointStruct
  }

  export type StackStructOutput = [
    ILienToken.LienStructOutput,
    ILienToken.PointStructOutput
  ] & {
    lien: ILienToken.LienStructOutput
    point: ILienToken.PointStructOutput
  }

  export type BuyoutLienParamsStruct = {
    lienSlope: PromiseOrValue<BigNumberish>
    lienEnd: PromiseOrValue<BigNumberish>
  }

  export type BuyoutLienParamsStructOutput = [BigNumber, BigNumber] & {
    lienSlope: BigNumber
    lienEnd: BigNumber
  }
}

export declare namespace IAstariaRouter {
  export type StrategyDetailsParamStruct = {
    version: PromiseOrValue<BigNumberish>
    deadline: PromiseOrValue<BigNumberish>
    vault: PromiseOrValue<string>
  }

  export type StrategyDetailsParamStructOutput = [number, BigNumber, string] & {
    version: number
    deadline: BigNumber
    vault: string
  }

  export type MerkleDataStruct = {
    root: PromiseOrValue<BytesLike>
    proof: PromiseOrValue<BytesLike>[]
  }

  export type MerkleDataStructOutput = [string, string[]] & {
    root: string
    proof: string[]
  }

  export type NewLienRequestStruct = {
    strategy: IAstariaRouter.StrategyDetailsParamStruct
    stack: ILienToken.StackStruct[]
    nlrDetails: PromiseOrValue<BytesLike>
    merkle: IAstariaRouter.MerkleDataStruct
    amount: PromiseOrValue<BigNumberish>
    v: PromiseOrValue<BigNumberish>
    r: PromiseOrValue<BytesLike>
    s: PromiseOrValue<BytesLike>
  }

  export type NewLienRequestStructOutput = [
    IAstariaRouter.StrategyDetailsParamStructOutput,
    ILienToken.StackStructOutput[],
    string,
    IAstariaRouter.MerkleDataStructOutput,
    BigNumber,
    number,
    string,
    string
  ] & {
    strategy: IAstariaRouter.StrategyDetailsParamStructOutput
    stack: ILienToken.StackStructOutput[]
    nlrDetails: string
    merkle: IAstariaRouter.MerkleDataStructOutput
    amount: BigNumber
    v: number
    r: string
    s: string
  }

  export type CommitmentStruct = {
    tokenContract: PromiseOrValue<string>
    tokenId: PromiseOrValue<BigNumberish>
    lienRequest: IAstariaRouter.NewLienRequestStruct
  }

  export type CommitmentStructOutput = [
    string,
    BigNumber,
    IAstariaRouter.NewLienRequestStructOutput
  ] & {
    tokenContract: string
    tokenId: BigNumber
    lienRequest: IAstariaRouter.NewLienRequestStructOutput
  }
}

export declare namespace IVaultImplementation {
  export type InitParamsStruct = {
    delegate: PromiseOrValue<string>
    allowListEnabled: PromiseOrValue<boolean>
    allowList: PromiseOrValue<string>[]
    depositCap: PromiseOrValue<BigNumberish>
  }

  export type InitParamsStructOutput = [
    string,
    boolean,
    string[],
    BigNumber
  ] & {
    delegate: string
    allowListEnabled: boolean
    allowList: string[]
    depositCap: BigNumber
  }
}

export interface PublicVaultInterface extends utils.Interface {
  functions: {
    'COLLATERAL_TOKEN()': FunctionFragment
    'DOMAIN_SEPARATOR()': FunctionFragment
    'EPOCH_LENGTH()': FunctionFragment
    'IMPL_TYPE()': FunctionFragment
    'LIEN_TOKEN()': FunctionFragment
    'ROUTER()': FunctionFragment
    'START()': FunctionFragment
    'STRATEGY_TYPEHASH()': FunctionFragment
    'VAULT_FEE()': FunctionFragment
    'accrue()': FunctionFragment
    'afterPayment(uint256)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'asset()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'beforePayment((uint256,uint256,uint256))': FunctionFragment
    'buyoutLien(((uint8,address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint256,uint40,uint40,uint256))[],uint8,(address,uint256,((uint8,uint256,address),((uint8,address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint256,uint40,uint40,uint256))[],bytes,(bytes32,bytes32[]),uint256,uint8,bytes32,bytes32)))': FunctionFragment
    'claim()': FunctionFragment
    'commitToLien((address,uint256,((uint8,uint256,address),((uint8,address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint256,uint40,uint40,uint256))[],bytes,(bytes32,bytes32[]),uint256,uint8,bytes32,bytes32)))': FunctionFragment
    'convertToAssets(uint256)': FunctionFragment
    'convertToShares(uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseEpochLienCount(uint64)': FunctionFragment
    'decreaseYIntercept(uint256)': FunctionFragment
    'deposit(uint256,address)': FunctionFragment
    'disableAllowList()': FunctionFragment
    'domainSeparator()': FunctionFragment
    'enableAllowList()': FunctionFragment
    'encodeStrategyData((uint8,uint256,address),bytes32)': FunctionFragment
    'getAllowList(address)': FunctionFragment
    'getCurrentEpoch()': FunctionFragment
    'getEpochData(uint64)': FunctionFragment
    'getEpochEnd(uint256)': FunctionFragment
    'getLienEpoch(uint64)': FunctionFragment
    'getLiquidationWithdrawRatio()': FunctionFragment
    'getPublicVaultState()': FunctionFragment
    'getShutdown()': FunctionFragment
    'getSlope()': FunctionFragment
    'getState()': FunctionFragment
    'getStrategistNonce()': FunctionFragment
    'getWithdrawProxy(uint64)': FunctionFragment
    'getWithdrawReserve()': FunctionFragment
    'getYIntercept()': FunctionFragment
    'handleLoseLienToBuyout((uint256,uint256),uint256)': FunctionFragment
    'increaseYIntercept(uint256)': FunctionFragment
    'incrementNonce()': FunctionFragment
    'init((address,bool,address[],uint256))': FunctionFragment
    'maxDeposit(address)': FunctionFragment
    'maxMint(address)': FunctionFragment
    'maxRedeem(address)': FunctionFragment
    'maxWithdraw(address)': FunctionFragment
    'minDepositAmount()': FunctionFragment
    'mint(uint256,address)': FunctionFragment
    'modifyAllowList(address,bool)': FunctionFragment
    'modifyDepositCap(uint256)': FunctionFragment
    'name()': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'owner()': FunctionFragment
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
    'previewDeposit(uint256)': FunctionFragment
    'previewMint(uint256)': FunctionFragment
    'previewRedeem(uint256)': FunctionFragment
    'previewWithdraw(uint256)': FunctionFragment
    'processEpoch()': FunctionFragment
    'recipient()': FunctionFragment
    'redeem(uint256,address,address)': FunctionFragment
    'redeemFutureEpoch(uint256,address,address,uint64)': FunctionFragment
    'setDelegate(address)': FunctionFragment
    'shutdown()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'timeToEpochEnd()': FunctionFragment
    'timeToEpochEnd(uint256)': FunctionFragment
    'timeToSecondEpochEnd()': FunctionFragment
    'totalAssets()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferWithdrawReserve()': FunctionFragment
    'updateAfterLiquidationPayment((uint256))': FunctionFragment
    'updateVaultAfterLiquidation(uint256,(uint256,uint256,uint40))': FunctionFragment
    'withdraw(uint256,address,address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'COLLATERAL_TOKEN'
      | 'DOMAIN_SEPARATOR'
      | 'EPOCH_LENGTH'
      | 'IMPL_TYPE'
      | 'LIEN_TOKEN'
      | 'ROUTER'
      | 'START'
      | 'STRATEGY_TYPEHASH'
      | 'VAULT_FEE'
      | 'accrue'
      | 'afterPayment'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'beforePayment'
      | 'buyoutLien'
      | 'claim'
      | 'commitToLien'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseEpochLienCount'
      | 'decreaseYIntercept'
      | 'deposit'
      | 'disableAllowList'
      | 'domainSeparator'
      | 'enableAllowList'
      | 'encodeStrategyData'
      | 'getAllowList'
      | 'getCurrentEpoch'
      | 'getEpochData'
      | 'getEpochEnd'
      | 'getLienEpoch'
      | 'getLiquidationWithdrawRatio'
      | 'getPublicVaultState'
      | 'getShutdown'
      | 'getSlope'
      | 'getState'
      | 'getStrategistNonce'
      | 'getWithdrawProxy'
      | 'getWithdrawReserve'
      | 'getYIntercept'
      | 'handleLoseLienToBuyout'
      | 'increaseYIntercept'
      | 'incrementNonce'
      | 'init'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'minDepositAmount'
      | 'mint'
      | 'modifyAllowList'
      | 'modifyDepositCap'
      | 'name'
      | 'onERC721Received'
      | 'owner'
      | 'permit'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'processEpoch'
      | 'recipient'
      | 'redeem'
      | 'redeemFutureEpoch'
      | 'setDelegate'
      | 'shutdown'
      | 'supportsInterface'
      | 'symbol'
      | 'timeToEpochEnd()'
      | 'timeToEpochEnd(uint256)'
      | 'timeToSecondEpochEnd'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferWithdrawReserve'
      | 'updateAfterLiquidationPayment'
      | 'updateVaultAfterLiquidation'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'COLLATERAL_TOKEN',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'EPOCH_LENGTH',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'IMPL_TYPE', values?: undefined): string
  encodeFunctionData(functionFragment: 'LIEN_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'ROUTER', values?: undefined): string
  encodeFunctionData(functionFragment: 'START', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'STRATEGY_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'VAULT_FEE', values?: undefined): string
  encodeFunctionData(functionFragment: 'accrue', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'afterPayment',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'beforePayment',
    values: [IPublicVault.BeforePaymentParamsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'buyoutLien',
    values: [
      ILienToken.StackStruct[],
      PromiseOrValue<BigNumberish>,
      IAstariaRouter.CommitmentStruct
    ]
  ): string
  encodeFunctionData(functionFragment: 'claim', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'commitToLien',
    values: [IAstariaRouter.CommitmentStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseEpochLienCount',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'decreaseYIntercept',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'disableAllowList',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'domainSeparator',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'enableAllowList',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'encodeStrategyData',
    values: [
      IAstariaRouter.StrategyDetailsParamStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getAllowList',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentEpoch',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getEpochData',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getEpochEnd',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getLienEpoch',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getLiquidationWithdrawRatio',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getPublicVaultState',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getShutdown',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getSlope', values?: undefined): string
  encodeFunctionData(functionFragment: 'getState', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getStrategistNonce',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getWithdrawProxy',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getWithdrawReserve',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getYIntercept',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'handleLoseLienToBuyout',
    values: [ILienToken.BuyoutLienParamsStruct, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'increaseYIntercept',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'incrementNonce',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'init',
    values: [IVaultImplementation.InitParamsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'minDepositAmount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'modifyAllowList',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'modifyDepositCap',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'processEpoch',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'recipient', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'redeemFutureEpoch',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'setDelegate',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'shutdown', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'timeToEpochEnd()',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'timeToEpochEnd(uint256)',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'timeToSecondEpochEnd',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'transferWithdrawReserve',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateAfterLiquidationPayment',
    values: [IPublicVault.LiquidationPaymentParamsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'updateVaultAfterLiquidation',
    values: [
      PromiseOrValue<BigNumberish>,
      IPublicVault.AfterLiquidationParamsStruct
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string

  decodeFunctionResult(
    functionFragment: 'COLLATERAL_TOKEN',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'EPOCH_LENGTH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'IMPL_TYPE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'LIEN_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ROUTER', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'START', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'STRATEGY_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'VAULT_FEE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'accrue', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'afterPayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'beforePayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'buyoutLien', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'commitToLien',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseEpochLienCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'decreaseYIntercept',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'disableAllowList',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'domainSeparator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'enableAllowList',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'encodeStrategyData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAllowList',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentEpoch',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEpochData',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getEpochEnd', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getLienEpoch',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLiquidationWithdrawRatio',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPublicVaultState',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getShutdown', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSlope', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getState', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getStrategistNonce',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getWithdrawProxy',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getWithdrawReserve',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getYIntercept',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'handleLoseLienToBuyout',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseYIntercept',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'incrementNonce',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'minDepositAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'modifyAllowList',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'modifyDepositCap',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'processEpoch',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'recipient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'redeemFutureEpoch',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setDelegate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'shutdown', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'timeToEpochEnd()',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'timeToEpochEnd(uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'timeToSecondEpochEnd',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferWithdrawReserve',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateAfterLiquidationPayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateVaultAfterLiquidation',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'AllowListEnabled(bool)': EventFragment
    'AllowListUpdated(address,bool)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'DelegateUpdated(address)': EventFragment
    'Deposit(address,address,uint256,uint256)': EventFragment
    'IncrementNonce(uint256)': EventFragment
    'LienOpen(uint256,uint256)': EventFragment
    'LiensOpenForEpochRemaining(uint64,uint256)': EventFragment
    'NonceUpdated(uint256)': EventFragment
    'SlopeUpdated(uint256)': EventFragment
    'StrategistFee(uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'VaultShutdown()': EventFragment
    'Withdraw(address,address,address,uint256,uint256)': EventFragment
    'WithdrawReserveTransferred(uint256)': EventFragment
    'YInterceptChanged(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AllowListEnabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AllowListUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DelegateUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'IncrementNonce'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LienOpen'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LiensOpenForEpochRemaining'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NonceUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SlopeUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StrategistFee'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VaultShutdown'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawReserveTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'YInterceptChanged'): EventFragment
}

export interface AllowListEnabledEventObject {
  arg0: boolean
}
export type AllowListEnabledEvent = TypedEvent<
  [boolean],
  AllowListEnabledEventObject
>

export type AllowListEnabledEventFilter =
  TypedEventFilter<AllowListEnabledEvent>

export interface AllowListUpdatedEventObject {
  arg0: string
  arg1: boolean
}
export type AllowListUpdatedEvent = TypedEvent<
  [string, boolean],
  AllowListUpdatedEventObject
>

export type AllowListUpdatedEventFilter =
  TypedEventFilter<AllowListUpdatedEvent>

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface DelegateUpdatedEventObject {
  arg0: string
}
export type DelegateUpdatedEvent = TypedEvent<
  [string],
  DelegateUpdatedEventObject
>

export type DelegateUpdatedEventFilter = TypedEventFilter<DelegateUpdatedEvent>

export interface DepositEventObject {
  sender: string
  owner: string
  assets: BigNumber
  shares: BigNumber
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export interface IncrementNonceEventObject {
  nonce: BigNumber
}
export type IncrementNonceEvent = TypedEvent<
  [BigNumber],
  IncrementNonceEventObject
>

export type IncrementNonceEventFilter = TypedEventFilter<IncrementNonceEvent>

export interface LienOpenEventObject {
  lienId: BigNumber
  epoch: BigNumber
}
export type LienOpenEvent = TypedEvent<
  [BigNumber, BigNumber],
  LienOpenEventObject
>

export type LienOpenEventFilter = TypedEventFilter<LienOpenEvent>

export interface LiensOpenForEpochRemainingEventObject {
  epoch: BigNumber
  liensOpenForEpoch: BigNumber
}
export type LiensOpenForEpochRemainingEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiensOpenForEpochRemainingEventObject
>

export type LiensOpenForEpochRemainingEventFilter =
  TypedEventFilter<LiensOpenForEpochRemainingEvent>

export interface NonceUpdatedEventObject {
  nonce: BigNumber
}
export type NonceUpdatedEvent = TypedEvent<[BigNumber], NonceUpdatedEventObject>

export type NonceUpdatedEventFilter = TypedEventFilter<NonceUpdatedEvent>

export interface SlopeUpdatedEventObject {
  newSlope: BigNumber
}
export type SlopeUpdatedEvent = TypedEvent<[BigNumber], SlopeUpdatedEventObject>

export type SlopeUpdatedEventFilter = TypedEventFilter<SlopeUpdatedEvent>

export interface StrategistFeeEventObject {
  feeInShares: BigNumber
}
export type StrategistFeeEvent = TypedEvent<
  [BigNumber],
  StrategistFeeEventObject
>

export type StrategistFeeEventFilter = TypedEventFilter<StrategistFeeEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface VaultShutdownEventObject {}
export type VaultShutdownEvent = TypedEvent<[], VaultShutdownEventObject>

export type VaultShutdownEventFilter = TypedEventFilter<VaultShutdownEvent>

export interface WithdrawEventObject {
  sender: string
  receiver: string
  owner: string
  assets: BigNumber
  shares: BigNumber
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface WithdrawReserveTransferredEventObject {
  amount: BigNumber
}
export type WithdrawReserveTransferredEvent = TypedEvent<
  [BigNumber],
  WithdrawReserveTransferredEventObject
>

export type WithdrawReserveTransferredEventFilter =
  TypedEventFilter<WithdrawReserveTransferredEvent>

export interface YInterceptChangedEventObject {
  newYintercept: BigNumber
}
export type YInterceptChangedEvent = TypedEvent<
  [BigNumber],
  YInterceptChangedEventObject
>

export type YInterceptChangedEventFilter =
  TypedEventFilter<YInterceptChangedEvent>

export interface PublicVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PublicVaultInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<[string]>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>

    IMPL_TYPE(overrides?: CallOverrides): Promise<[number]>

    LIEN_TOKEN(overrides?: CallOverrides): Promise<[string]>

    ROUTER(overrides?: CallOverrides): Promise<[string]>

    START(overrides?: CallOverrides): Promise<[BigNumber]>

    STRATEGY_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    VAULT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    afterPayment(
      computedSlope: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    asset(overrides?: CallOverrides): Promise<[string]>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    beforePayment(
      params: IPublicVault.BeforePaymentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    buyoutLien(
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      incomingTerms: IAstariaRouter.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    commitToLien(
      params: IAstariaRouter.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseEpochLienCount(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    decreaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    disableAllowList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<[string]>

    enableAllowList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    encodeStrategyData(
      strategy: IAstariaRouter.StrategyDetailsParamStruct,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getAllowList(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    getEpochEnd(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getLienEpoch(
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getLiquidationWithdrawRatio(overrides?: CallOverrides): Promise<[BigNumber]>

    getPublicVaultState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber]
    >

    getShutdown(overrides?: CallOverrides): Promise<[boolean]>

    getSlope(overrides?: CallOverrides): Promise<[BigNumber]>

    getState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, boolean, boolean, BigNumber]>

    getStrategistNonce(overrides?: CallOverrides): Promise<[BigNumber]>

    getWithdrawProxy(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getWithdrawReserve(overrides?: CallOverrides): Promise<[BigNumber]>

    getYIntercept(overrides?: CallOverrides): Promise<[BigNumber]>

    handleLoseLienToBuyout(
      buyoutParams: ILienToken.BuyoutLienParamsStruct,
      buyoutFeeIfAny: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    increaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    incrementNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    init(
      params: IVaultImplementation.InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    minDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    modifyAllowList(
      depositor: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    modifyDepositCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    processEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    recipient(overrides?: CallOverrides): Promise<[string]>

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    redeemFutureEpoch(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDelegate(
      delegate_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'timeToEpochEnd()'(overrides?: CallOverrides): Promise<[BigNumber]>

    'timeToEpochEnd(uint256)'(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    timeToSecondEpochEnd(overrides?: CallOverrides): Promise<[BigNumber]>

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferWithdrawReserve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateAfterLiquidationPayment(
      params: IPublicVault.LiquidationPaymentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateVaultAfterLiquidation(
      maxAuctionWindow: PromiseOrValue<BigNumberish>,
      params: IPublicVault.AfterLiquidationParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<string>

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>

  IMPL_TYPE(overrides?: CallOverrides): Promise<number>

  LIEN_TOKEN(overrides?: CallOverrides): Promise<string>

  ROUTER(overrides?: CallOverrides): Promise<string>

  START(overrides?: CallOverrides): Promise<BigNumber>

  STRATEGY_TYPEHASH(overrides?: CallOverrides): Promise<string>

  VAULT_FEE(overrides?: CallOverrides): Promise<BigNumber>

  accrue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  afterPayment(
    computedSlope: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  asset(overrides?: CallOverrides): Promise<string>

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  beforePayment(
    params: IPublicVault.BeforePaymentParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  buyoutLien(
    stack: ILienToken.StackStruct[],
    position: PromiseOrValue<BigNumberish>,
    incomingTerms: IAstariaRouter.CommitmentStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  commitToLien(
    params: IAstariaRouter.CommitmentStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseEpochLienCount(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  decreaseYIntercept(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  disableAllowList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  domainSeparator(overrides?: CallOverrides): Promise<string>

  enableAllowList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  encodeStrategyData(
    strategy: IAstariaRouter.StrategyDetailsParamStruct,
    root: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  getAllowList(
    depositor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>

  getEpochData(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>

  getEpochEnd(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getLienEpoch(
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getLiquidationWithdrawRatio(overrides?: CallOverrides): Promise<BigNumber>

  getPublicVaultState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber]
  >

  getShutdown(overrides?: CallOverrides): Promise<boolean>

  getSlope(overrides?: CallOverrides): Promise<BigNumber>

  getState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, boolean, boolean, BigNumber]>

  getStrategistNonce(overrides?: CallOverrides): Promise<BigNumber>

  getWithdrawProxy(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  getWithdrawReserve(overrides?: CallOverrides): Promise<BigNumber>

  getYIntercept(overrides?: CallOverrides): Promise<BigNumber>

  handleLoseLienToBuyout(
    buyoutParams: ILienToken.BuyoutLienParamsStruct,
    buyoutFeeIfAny: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  increaseYIntercept(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  incrementNonce(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  init(
    params: IVaultImplementation.InitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  maxDeposit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  maxMint(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  maxRedeem(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  maxWithdraw(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>

  mint(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  modifyAllowList(
    depositor: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  modifyDepositCap(
    newCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  previewDeposit(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  previewMint(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  previewRedeem(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  previewWithdraw(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  processEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  recipient(overrides?: CallOverrides): Promise<string>

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  redeemFutureEpoch(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setDelegate(
    delegate_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  shutdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  'timeToEpochEnd()'(overrides?: CallOverrides): Promise<BigNumber>

  'timeToEpochEnd(uint256)'(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  timeToSecondEpochEnd(overrides?: CallOverrides): Promise<BigNumber>

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferWithdrawReserve(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateAfterLiquidationPayment(
    params: IPublicVault.LiquidationPaymentParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateVaultAfterLiquidation(
    maxAuctionWindow: PromiseOrValue<BigNumberish>,
    params: IPublicVault.AfterLiquidationParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<string>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>

    IMPL_TYPE(overrides?: CallOverrides): Promise<number>

    LIEN_TOKEN(overrides?: CallOverrides): Promise<string>

    ROUTER(overrides?: CallOverrides): Promise<string>

    START(overrides?: CallOverrides): Promise<BigNumber>

    STRATEGY_TYPEHASH(overrides?: CallOverrides): Promise<string>

    VAULT_FEE(overrides?: CallOverrides): Promise<BigNumber>

    accrue(overrides?: CallOverrides): Promise<BigNumber>

    afterPayment(
      computedSlope: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    asset(overrides?: CallOverrides): Promise<string>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    beforePayment(
      params: IPublicVault.BeforePaymentParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    buyoutLien(
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      incomingTerms: IAstariaRouter.CommitmentStruct,
      overrides?: CallOverrides
    ): Promise<
      [ILienToken.StackStructOutput[], ILienToken.StackStructOutput] & {
        stacks: ILienToken.StackStructOutput[]
        newStack: ILienToken.StackStructOutput
      }
    >

    claim(overrides?: CallOverrides): Promise<void>

    commitToLien(
      params: IAstariaRouter.CommitmentStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, ILienToken.StackStructOutput[]] & {
        lienId: BigNumber
        stack: ILienToken.StackStructOutput[]
      }
    >

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseEpochLienCount(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    decreaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    disableAllowList(overrides?: CallOverrides): Promise<void>

    domainSeparator(overrides?: CallOverrides): Promise<string>

    enableAllowList(overrides?: CallOverrides): Promise<void>

    encodeStrategyData(
      strategy: IAstariaRouter.StrategyDetailsParamStruct,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    getAllowList(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>

    getEpochEnd(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLienEpoch(
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLiquidationWithdrawRatio(overrides?: CallOverrides): Promise<BigNumber>

    getPublicVaultState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber]
    >

    getShutdown(overrides?: CallOverrides): Promise<boolean>

    getSlope(overrides?: CallOverrides): Promise<BigNumber>

    getState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, boolean, boolean, BigNumber]>

    getStrategistNonce(overrides?: CallOverrides): Promise<BigNumber>

    getWithdrawProxy(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    getWithdrawReserve(overrides?: CallOverrides): Promise<BigNumber>

    getYIntercept(overrides?: CallOverrides): Promise<BigNumber>

    handleLoseLienToBuyout(
      buyoutParams: ILienToken.BuyoutLienParamsStruct,
      buyoutFeeIfAny: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    increaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    incrementNonce(overrides?: CallOverrides): Promise<void>

    init(
      params: IVaultImplementation.InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    modifyAllowList(
      depositor: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    modifyDepositCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    processEpoch(overrides?: CallOverrides): Promise<void>

    recipient(overrides?: CallOverrides): Promise<string>

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    redeemFutureEpoch(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setDelegate(
      delegate_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    shutdown(overrides?: CallOverrides): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    'timeToEpochEnd()'(overrides?: CallOverrides): Promise<BigNumber>

    'timeToEpochEnd(uint256)'(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    timeToSecondEpochEnd(overrides?: CallOverrides): Promise<BigNumber>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferWithdrawReserve(overrides?: CallOverrides): Promise<void>

    updateAfterLiquidationPayment(
      params: IPublicVault.LiquidationPaymentParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    updateVaultAfterLiquidation(
      maxAuctionWindow: PromiseOrValue<BigNumberish>,
      params: IPublicVault.AfterLiquidationParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    'AllowListEnabled(bool)'(arg0?: null): AllowListEnabledEventFilter
    AllowListEnabled(arg0?: null): AllowListEnabledEventFilter

    'AllowListUpdated(address,bool)'(
      arg0?: null,
      arg1?: null
    ): AllowListUpdatedEventFilter
    AllowListUpdated(arg0?: null, arg1?: null): AllowListUpdatedEventFilter

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter

    'DelegateUpdated(address)'(arg0?: null): DelegateUpdatedEventFilter
    DelegateUpdated(arg0?: null): DelegateUpdatedEventFilter

    'Deposit(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter
    Deposit(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter

    'IncrementNonce(uint256)'(nonce?: null): IncrementNonceEventFilter
    IncrementNonce(nonce?: null): IncrementNonceEventFilter

    'LienOpen(uint256,uint256)'(
      lienId?: null,
      epoch?: null
    ): LienOpenEventFilter
    LienOpen(lienId?: null, epoch?: null): LienOpenEventFilter

    'LiensOpenForEpochRemaining(uint64,uint256)'(
      epoch?: null,
      liensOpenForEpoch?: null
    ): LiensOpenForEpochRemainingEventFilter
    LiensOpenForEpochRemaining(
      epoch?: null,
      liensOpenForEpoch?: null
    ): LiensOpenForEpochRemainingEventFilter

    'NonceUpdated(uint256)'(nonce?: null): NonceUpdatedEventFilter
    NonceUpdated(nonce?: null): NonceUpdatedEventFilter

    'SlopeUpdated(uint256)'(newSlope?: null): SlopeUpdatedEventFilter
    SlopeUpdated(newSlope?: null): SlopeUpdatedEventFilter

    'StrategistFee(uint256)'(feeInShares?: null): StrategistFeeEventFilter
    StrategistFee(feeInShares?: null): StrategistFeeEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter

    'VaultShutdown()'(): VaultShutdownEventFilter
    VaultShutdown(): VaultShutdownEventFilter

    'Withdraw(address,address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter

    'WithdrawReserveTransferred(uint256)'(
      amount?: null
    ): WithdrawReserveTransferredEventFilter
    WithdrawReserveTransferred(
      amount?: null
    ): WithdrawReserveTransferredEventFilter

    'YInterceptChanged(uint256)'(
      newYintercept?: null
    ): YInterceptChangedEventFilter
    YInterceptChanged(newYintercept?: null): YInterceptChangedEventFilter
  }

  estimateGas: {
    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>

    IMPL_TYPE(overrides?: CallOverrides): Promise<BigNumber>

    LIEN_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    ROUTER(overrides?: CallOverrides): Promise<BigNumber>

    START(overrides?: CallOverrides): Promise<BigNumber>

    STRATEGY_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    VAULT_FEE(overrides?: CallOverrides): Promise<BigNumber>

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    afterPayment(
      computedSlope: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    asset(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    beforePayment(
      params: IPublicVault.BeforePaymentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    buyoutLien(
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      incomingTerms: IAstariaRouter.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    commitToLien(
      params: IAstariaRouter.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseEpochLienCount(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    decreaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    disableAllowList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>

    enableAllowList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    encodeStrategyData(
      strategy: IAstariaRouter.StrategyDetailsParamStruct,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllowList(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEpochEnd(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLienEpoch(
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLiquidationWithdrawRatio(overrides?: CallOverrides): Promise<BigNumber>

    getPublicVaultState(overrides?: CallOverrides): Promise<BigNumber>

    getShutdown(overrides?: CallOverrides): Promise<BigNumber>

    getSlope(overrides?: CallOverrides): Promise<BigNumber>

    getState(overrides?: CallOverrides): Promise<BigNumber>

    getStrategistNonce(overrides?: CallOverrides): Promise<BigNumber>

    getWithdrawProxy(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getWithdrawReserve(overrides?: CallOverrides): Promise<BigNumber>

    getYIntercept(overrides?: CallOverrides): Promise<BigNumber>

    handleLoseLienToBuyout(
      buyoutParams: ILienToken.BuyoutLienParamsStruct,
      buyoutFeeIfAny: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    increaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    incrementNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    init(
      params: IVaultImplementation.InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    modifyAllowList(
      depositor: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    modifyDepositCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    processEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    recipient(overrides?: CallOverrides): Promise<BigNumber>

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    redeemFutureEpoch(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setDelegate(
      delegate_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'timeToEpochEnd()'(overrides?: CallOverrides): Promise<BigNumber>

    'timeToEpochEnd(uint256)'(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    timeToSecondEpochEnd(overrides?: CallOverrides): Promise<BigNumber>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferWithdrawReserve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateAfterLiquidationPayment(
      params: IPublicVault.LiquidationPaymentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateVaultAfterLiquidation(
      maxAuctionWindow: PromiseOrValue<BigNumberish>,
      params: IPublicVault.AfterLiquidationParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    IMPL_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LIEN_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>

    START(overrides?: CallOverrides): Promise<PopulatedTransaction>

    STRATEGY_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    VAULT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    afterPayment(
      computedSlope: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    beforePayment(
      params: IPublicVault.BeforePaymentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    buyoutLien(
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      incomingTerms: IAstariaRouter.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    commitToLien(
      params: IAstariaRouter.CommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseEpochLienCount(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    decreaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    disableAllowList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    enableAllowList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    encodeStrategyData(
      strategy: IAstariaRouter.StrategyDetailsParamStruct,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAllowList(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getEpochEnd(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLienEpoch(
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLiquidationWithdrawRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPublicVaultState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStrategistNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getWithdrawProxy(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getWithdrawReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getYIntercept(overrides?: CallOverrides): Promise<PopulatedTransaction>

    handleLoseLienToBuyout(
      buyoutParams: ILienToken.BuyoutLienParamsStruct,
      buyoutFeeIfAny: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    increaseYIntercept(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    incrementNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    init(
      params: IVaultImplementation.InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    minDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    modifyAllowList(
      depositor: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    modifyDepositCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    processEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    redeemFutureEpoch(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setDelegate(
      delegate_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'timeToEpochEnd()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'timeToEpochEnd(uint256)'(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    timeToSecondEpochEnd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferWithdrawReserve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateAfterLiquidationPayment(
      params: IPublicVault.LiquidationPaymentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateVaultAfterLiquidation(
      maxAuctionWindow: PromiseOrValue<BigNumberish>,
      params: IPublicVault.AfterLiquidationParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
