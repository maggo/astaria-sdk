/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type OfferItemStruct = {
  itemType: PromiseOrValue<BigNumberish>
  token: PromiseOrValue<string>
  identifierOrCriteria: PromiseOrValue<BigNumberish>
  startAmount: PromiseOrValue<BigNumberish>
  endAmount: PromiseOrValue<BigNumberish>
}

export type OfferItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  itemType: number
  token: string
  identifierOrCriteria: BigNumber
  startAmount: BigNumber
  endAmount: BigNumber
}

export type ConsiderationItemStruct = {
  itemType: PromiseOrValue<BigNumberish>
  token: PromiseOrValue<string>
  identifierOrCriteria: PromiseOrValue<BigNumberish>
  startAmount: PromiseOrValue<BigNumberish>
  endAmount: PromiseOrValue<BigNumberish>
  recipient: PromiseOrValue<string>
}

export type ConsiderationItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  itemType: number
  token: string
  identifierOrCriteria: BigNumber
  startAmount: BigNumber
  endAmount: BigNumber
  recipient: string
}

export type OrderParametersStruct = {
  offerer: PromiseOrValue<string>
  zone: PromiseOrValue<string>
  offer: OfferItemStruct[]
  consideration: ConsiderationItemStruct[]
  orderType: PromiseOrValue<BigNumberish>
  startTime: PromiseOrValue<BigNumberish>
  endTime: PromiseOrValue<BigNumberish>
  zoneHash: PromiseOrValue<BytesLike>
  salt: PromiseOrValue<BigNumberish>
  conduitKey: PromiseOrValue<BytesLike>
  totalOriginalConsiderationItems: PromiseOrValue<BigNumberish>
}

export type OrderParametersStructOutput = [
  string,
  string,
  OfferItemStructOutput[],
  ConsiderationItemStructOutput[],
  number,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber
] & {
  offerer: string
  zone: string
  offer: OfferItemStructOutput[]
  consideration: ConsiderationItemStructOutput[]
  orderType: number
  startTime: BigNumber
  endTime: BigNumber
  zoneHash: string
  salt: BigNumber
  conduitKey: string
  totalOriginalConsiderationItems: BigNumber
}

export type OrderStruct = {
  parameters: OrderParametersStruct
  signature: PromiseOrValue<BytesLike>
}

export type OrderStructOutput = [OrderParametersStructOutput, string] & {
  parameters: OrderParametersStructOutput
  signature: string
}

export declare namespace ClearingHouse {
  export type AuctionStackStruct = {
    lienId: PromiseOrValue<BigNumberish>
    amountOwed: PromiseOrValue<BigNumberish>
    end: PromiseOrValue<BigNumberish>
  }

  export type AuctionStackStructOutput = [BigNumber, BigNumber, number] & {
    lienId: BigNumber
    amountOwed: BigNumber
    end: number
  }

  export type AuctionDataStruct = {
    startAmount: PromiseOrValue<BigNumberish>
    endAmount: PromiseOrValue<BigNumberish>
    startTime: PromiseOrValue<BigNumberish>
    endTime: PromiseOrValue<BigNumberish>
    liquidator: PromiseOrValue<string>
    token: PromiseOrValue<string>
    stack: ClearingHouse.AuctionStackStruct[]
  }

  export type AuctionDataStructOutput = [
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    string,
    ClearingHouse.AuctionStackStructOutput[]
  ] & {
    startAmount: BigNumber
    endAmount: BigNumber
    startTime: number
    endTime: number
    liquidator: string
    token: string
    stack: ClearingHouse.AuctionStackStructOutput[]
  }
}

export interface ClearingHouseInterface extends utils.Interface {
  functions: {
    'COLLATERAL_ID()': FunctionFragment
    'IMPL_TYPE()': FunctionFragment
    'ROUTER()': FunctionFragment
    'balanceOf(address,uint256)': FunctionFragment
    'balanceOfBatch(address[],uint256[])': FunctionFragment
    'getAuctionData()': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setAuctionData((uint256,uint256,uint48,uint48,address,address,(uint256,uint256,uint40)[]))': FunctionFragment
    'settleLiquidatorNFTClaim()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'transferUnderlying(address,uint256,address)': FunctionFragment
    'validateOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'COLLATERAL_ID'
      | 'IMPL_TYPE'
      | 'ROUTER'
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'getAuctionData'
      | 'isApprovedForAll'
      | 'onERC721Received'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'setApprovalForAll'
      | 'setAuctionData'
      | 'settleLiquidatorNFTClaim'
      | 'supportsInterface'
      | 'transferUnderlying'
      | 'validateOrder'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'COLLATERAL_ID',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'IMPL_TYPE', values?: undefined): string
  encodeFunctionData(functionFragment: 'ROUTER', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getAuctionData',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'setAuctionData',
    values: [ClearingHouse.AuctionDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'settleLiquidatorNFTClaim',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferUnderlying',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'validateOrder',
    values: [OrderStruct]
  ): string

  decodeFunctionResult(
    functionFragment: 'COLLATERAL_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'IMPL_TYPE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ROUTER', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'balanceOfBatch',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAuctionData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeBatchTransferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAuctionData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'settleLiquidatorNFTClaim',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferUnderlying',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'validateOrder',
    data: BytesLike
  ): Result

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment
    'URI(string,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment
}

export interface ApprovalForAllEventObject {
  account: string
  operator: string
  approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface TransferBatchEventObject {
  operator: string
  from: string
  to: string
  ids: BigNumber[]
  values: BigNumber[]
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>

export interface TransferSingleEventObject {
  operator: string
  from: string
  to: string
  id: BigNumber
  value: BigNumber
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>

export interface URIEventObject {
  value: string
  id: BigNumber
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>

export type URIEventFilter = TypedEventFilter<URIEvent>

export interface ClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ClearingHouseInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    COLLATERAL_ID(overrides?: CallOverrides): Promise<[BigNumber]>

    IMPL_TYPE(overrides?: CallOverrides): Promise<[number]>

    ROUTER(overrides?: CallOverrides): Promise<[string]>

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { output: BigNumber[] }>

    getAuctionData(
      overrides?: CallOverrides
    ): Promise<[ClearingHouse.AuctionDataStructOutput]>

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      identifier: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setAuctionData(
      auctionData: ClearingHouse.AuctionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    settleLiquidatorNFTClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    transferUnderlying(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    validateOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  COLLATERAL_ID(overrides?: CallOverrides): Promise<BigNumber>

  IMPL_TYPE(overrides?: CallOverrides): Promise<number>

  ROUTER(overrides?: CallOverrides): Promise<string>

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getAuctionData(
    overrides?: CallOverrides
  ): Promise<ClearingHouse.AuctionDataStructOutput>

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  onERC721Received(
    operator_: PromiseOrValue<string>,
    from_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    identifier: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setAuctionData(
    auctionData: ClearingHouse.AuctionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  settleLiquidatorNFTClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  transferUnderlying(
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  validateOrder(
    order: OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    COLLATERAL_ID(overrides?: CallOverrides): Promise<BigNumber>

    IMPL_TYPE(overrides?: CallOverrides): Promise<number>

    ROUTER(overrides?: CallOverrides): Promise<string>

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getAuctionData(
      overrides?: CallOverrides
    ): Promise<ClearingHouse.AuctionDataStructOutput>

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      identifier: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setAuctionData(
      auctionData: ClearingHouse.AuctionDataStruct,
      overrides?: CallOverrides
    ): Promise<void>

    settleLiquidatorNFTClaim(overrides?: CallOverrides): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferUnderlying(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    validateOrder(order: OrderStruct, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'ApprovalForAll(address,address,bool)'(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter

    'TransferSingle(address,address,address,uint256,uint256)'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter

    'URI(string,uint256)'(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter
  }

  estimateGas: {
    COLLATERAL_ID(overrides?: CallOverrides): Promise<BigNumber>

    IMPL_TYPE(overrides?: CallOverrides): Promise<BigNumber>

    ROUTER(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAuctionData(overrides?: CallOverrides): Promise<BigNumber>

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      identifier: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setAuctionData(
      auctionData: ClearingHouse.AuctionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    settleLiquidatorNFTClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferUnderlying(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    validateOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    COLLATERAL_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    IMPL_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAuctionData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      identifier: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setAuctionData(
      auctionData: ClearingHouse.AuctionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    settleLiquidatorNFTClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferUnderlying(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    validateOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
