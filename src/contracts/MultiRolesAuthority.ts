/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface MultiRolesAuthorityInterface extends utils.Interface {
  functions: {
    'authority()': FunctionFragment
    'canCall(address,address,bytes4)': FunctionFragment
    'doesRoleHaveCapability(uint8,bytes4)': FunctionFragment
    'doesUserHaveRole(address,uint8)': FunctionFragment
    'getRolesWithCapability(bytes4)': FunctionFragment
    'getTargetCustomAuthority(address)': FunctionFragment
    'getUserRoles(address)': FunctionFragment
    'isCapabilityPublic(bytes4)': FunctionFragment
    'owner()': FunctionFragment
    'setAuthority(address)': FunctionFragment
    'setPublicCapability(bytes4,bool)': FunctionFragment
    'setRoleCapability(uint8,bytes4,bool)': FunctionFragment
    'setTargetCustomAuthority(address,address)': FunctionFragment
    'setUserRole(address,uint8,bool)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'authority'
      | 'canCall'
      | 'doesRoleHaveCapability'
      | 'doesUserHaveRole'
      | 'getRolesWithCapability'
      | 'getTargetCustomAuthority'
      | 'getUserRoles'
      | 'isCapabilityPublic'
      | 'owner'
      | 'setAuthority'
      | 'setPublicCapability'
      | 'setRoleCapability'
      | 'setTargetCustomAuthority'
      | 'setUserRole'
      | 'transferOwnership'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'authority', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'canCall',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'doesRoleHaveCapability',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'doesUserHaveRole',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getRolesWithCapability',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getTargetCustomAuthority',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'getUserRoles',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'isCapabilityPublic',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setAuthority',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setPublicCapability',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'setRoleCapability',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'setTargetCustomAuthority',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setUserRole',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canCall', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'doesRoleHaveCapability',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'doesUserHaveRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRolesWithCapability',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTargetCustomAuthority',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserRoles',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isCapabilityPublic',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setAuthority',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPublicCapability',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setRoleCapability',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setTargetCustomAuthority',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setUserRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result

  events: {
    'AuthorityUpdated(address,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'PublicCapabilityUpdated(bytes4,bool)': EventFragment
    'RoleCapabilityUpdated(uint8,bytes4,bool)': EventFragment
    'TargetCustomAuthorityUpdated(address,address)': EventFragment
    'UserRoleUpdated(address,uint8,bool)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AuthorityUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PublicCapabilityUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleCapabilityUpdated'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'TargetCustomAuthorityUpdated'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UserRoleUpdated'): EventFragment
}

export interface AuthorityUpdatedEventObject {
  user: string
  newAuthority: string
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string, string],
  AuthorityUpdatedEventObject
>

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>

export interface OwnershipTransferredEventObject {
  user: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface PublicCapabilityUpdatedEventObject {
  functionSig: string
  enabled: boolean
}
export type PublicCapabilityUpdatedEvent = TypedEvent<
  [string, boolean],
  PublicCapabilityUpdatedEventObject
>

export type PublicCapabilityUpdatedEventFilter =
  TypedEventFilter<PublicCapabilityUpdatedEvent>

export interface RoleCapabilityUpdatedEventObject {
  role: number
  functionSig: string
  enabled: boolean
}
export type RoleCapabilityUpdatedEvent = TypedEvent<
  [number, string, boolean],
  RoleCapabilityUpdatedEventObject
>

export type RoleCapabilityUpdatedEventFilter =
  TypedEventFilter<RoleCapabilityUpdatedEvent>

export interface TargetCustomAuthorityUpdatedEventObject {
  target: string
  authority: string
}
export type TargetCustomAuthorityUpdatedEvent = TypedEvent<
  [string, string],
  TargetCustomAuthorityUpdatedEventObject
>

export type TargetCustomAuthorityUpdatedEventFilter =
  TypedEventFilter<TargetCustomAuthorityUpdatedEvent>

export interface UserRoleUpdatedEventObject {
  user: string
  role: number
  enabled: boolean
}
export type UserRoleUpdatedEvent = TypedEvent<
  [string, number, boolean],
  UserRoleUpdatedEventObject
>

export type UserRoleUpdatedEventFilter = TypedEventFilter<UserRoleUpdatedEvent>

export interface MultiRolesAuthority extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MultiRolesAuthorityInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>

    canCall(
      user: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    doesRoleHaveCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    doesUserHaveRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getRolesWithCapability(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getTargetCustomAuthority(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getUserRoles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>

    isCapabilityPublic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPublicCapability(
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTargetCustomAuthority(
      target: PromiseOrValue<string>,
      customAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setUserRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  authority(overrides?: CallOverrides): Promise<string>

  canCall(
    user: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  doesRoleHaveCapability(
    role: PromiseOrValue<BigNumberish>,
    functionSig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  doesUserHaveRole(
    user: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>

  getRolesWithCapability(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  getTargetCustomAuthority(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>

  getUserRoles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>

  isCapabilityPublic(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPublicCapability(
    functionSig: PromiseOrValue<BytesLike>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setRoleCapability(
    role: PromiseOrValue<BigNumberish>,
    functionSig: PromiseOrValue<BytesLike>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setTargetCustomAuthority(
    target: PromiseOrValue<string>,
    customAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setUserRole(
    user: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>

    canCall(
      user: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    doesRoleHaveCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    doesUserHaveRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    getRolesWithCapability(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    getTargetCustomAuthority(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>

    getUserRoles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>

    isCapabilityPublic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    setPublicCapability(
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setTargetCustomAuthority(
      target: PromiseOrValue<string>,
      customAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    setUserRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'AuthorityUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter
    AuthorityUpdated(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter

    'OwnershipTransferred(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'PublicCapabilityUpdated(bytes4,bool)'(
      functionSig?: PromiseOrValue<BytesLike> | null,
      enabled?: null
    ): PublicCapabilityUpdatedEventFilter
    PublicCapabilityUpdated(
      functionSig?: PromiseOrValue<BytesLike> | null,
      enabled?: null
    ): PublicCapabilityUpdatedEventFilter

    'RoleCapabilityUpdated(uint8,bytes4,bool)'(
      role?: PromiseOrValue<BigNumberish> | null,
      functionSig?: PromiseOrValue<BytesLike> | null,
      enabled?: null
    ): RoleCapabilityUpdatedEventFilter
    RoleCapabilityUpdated(
      role?: PromiseOrValue<BigNumberish> | null,
      functionSig?: PromiseOrValue<BytesLike> | null,
      enabled?: null
    ): RoleCapabilityUpdatedEventFilter

    'TargetCustomAuthorityUpdated(address,address)'(
      target?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): TargetCustomAuthorityUpdatedEventFilter
    TargetCustomAuthorityUpdated(
      target?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): TargetCustomAuthorityUpdatedEventFilter

    'UserRoleUpdated(address,uint8,bool)'(
      user?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      enabled?: null
    ): UserRoleUpdatedEventFilter
    UserRoleUpdated(
      user?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      enabled?: null
    ): UserRoleUpdatedEventFilter
  }

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>

    canCall(
      user: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    doesRoleHaveCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    doesUserHaveRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRolesWithCapability(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTargetCustomAuthority(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUserRoles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isCapabilityPublic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPublicCapability(
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setTargetCustomAuthority(
      target: PromiseOrValue<string>,
      customAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setUserRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>

    canCall(
      user: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    doesRoleHaveCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    doesUserHaveRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRolesWithCapability(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTargetCustomAuthority(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getUserRoles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isCapabilityPublic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPublicCapability(
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      functionSig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setTargetCustomAuthority(
      target: PromiseOrValue<string>,
      customAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setUserRole(
      user: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
